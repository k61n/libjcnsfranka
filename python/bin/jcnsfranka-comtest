#!/usr/bin/env python3

import argparse
import sys

from pyjcnsfranka.robot import comtest


def _str2bool(s: str) -> bool:
    """Parse strings for positional booleans."""
    t = s.strip().lower()
    if t in {'1', 'true', 'yes', 'y', 'on'}:
        return True
    if t in {'0', 'false', 'no', 'n', 'off'}:
        return False
    raise argparse.ArgumentTypeError(
        f'Expected a boolean (one of: yes/no, true/false, 1/0); got {s!r}'
    )


def parse_args(argv=None):
    parser = argparse.ArgumentParser(
        prog='jcnsfranka-comtest',
        description=(
            'Send 10k empty commands to a robot and report lost states.\n'
            'Arguments are positional and must be provided in this order:\n'
            '    ip, realtime_config, limit_rate, cutoff_frequency'
        ),
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=(
            'Examples:\n'
            '    jcnsfranka-comtest 192.168.1.2 true false 1000\n'
            '    jcnsfranka-comtest franka yes yes 100\n'
            '    jcnsfranka-comtest 192.168.201.2 1 0 1000'
        ),
    )

    # Positional arguments in the required order
    parser.add_argument(
        'ip',
        help='Robot host or IP address (e.g., 192.168.1.2 or franka).',
    )
    parser.add_argument(
        'realtime_config',
        type=_str2bool,
        help='Enforce realtime configuration: true/false (also yes/no, 1/0).',
        metavar='realtime_config[bool]',
    )
    parser.add_argument(
        'limit_rate',
        type=_str2bool,
        help='Enable rate limiters: true/false (also yes/no, 1/0).',
        metavar='limit_rate[bool]',
    )
    parser.add_argument(
        'cutoff_frequency',
        type=int,
        choices=(100, 1000),
        help='Low-pass cutoff frequency in Hz (allowed: 100 or 1000).',
        metavar='cutoff_frequency[100|1000]',
    )

    return parser.parse_args(argv)


if __name__ == '__main__':
    args = parse_args(sys.argv[1:])

    comtest(args.ip,
            args.realtime_config,
            args.limit_rate,
            args.cutoff_frequency,
            )
